8th December 2018
-- added VehicleController.cs :-

public class VehicleController : Controller
    {
        [HttpGet("api/vehicles")]
        public IActionResult Get()
        {
            return Ok(new VehicleMake(){Id=600, Make="Blah"});
        }
    }

NOTE you could return Json instead of IActionResult if you wanted, but that doesnt give you a way
of returning a bad request if an exception is thrown (for example, with IActionReut you can return,
'Bad' for instance)

28th December 2018
   Altered VehicleController.Get so that it retreives data from the database
   this was achieved by adding a constructor and injecting IVehicleRepository

   Added ne models. Now the back end db contains new tables..
   Country
   City
   Dealer 
   Vehicle

   Country, City and Dealer -> relationships defined in VehicleContext.OnModelCreating
   (see below) - this was not done for vehicle - instead I marked the foreign keys with 
   'ForeignKey' attributes since there were may foreign keys in this table (dont know 
   how to specify multiple fks with the modelbuilder method llisted below). Also I am unsure
   why the fk properties in Vehicle need to be virtual? Find out why! (Suggest pluralsight course
   on EF Core)

   protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VehicleModel>()
            .HasOne(p => p.Make)
            .WithMany(b => b.Models)
            .HasForeignKey(p => p.VehicleMakeForeignKey)
            .IsRequired()
            .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<City>()
            .HasOne(p => p.Country)
            .WithMany(b => b.Cities)
            .HasForeignKey(p => p.CountryForeignKey)
            .IsRequired()
            .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Dealer>()
            .HasOne(p => p.City)
            .WithMany(b => b.Dealerships)
            .HasForeignKey(p => p.CityForeignKey)
            .IsRequired()
            .OnDelete(DeleteBehavior.Cascade);
        }

10th January 2019
   Added reference to Automapper
   used in api controller to convert viewmodel to model in preparation to saving to db (POST)

   AutoMapper configured in startup.configure as :-

   Mapper.Initialize(config =>
            {
                config.CreateMap<VehicleViewModel, Vehicle>().ReverseMap();
            });

    Note the call to ReverseMap - this essentially makes a TWO way maping between 
    VehicleViewMOdel <-> Vehicle
    

22nd March 2019.
   Trying to map view model to model (VehicleViewModel to Vehicle) but 2 of the properties are of different types
   seeing strange error message (see https://stackoverflow.com/questions/55261646/auto-mapper-error-no-parameterless-constructor-defined-for-this-object?noredirect=1#comment97279742_55261646)
   for detail on this. one comment said DI broken / not set up correctly.

   Exploring this. Read http://docs.automapper.org/en/latest/Dependency-injection.html

   Added the recommended Nuget package to CarPrice Comparison.csproj..
   <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="6.0.0">

30th March 
    Rather than configure mappings in startup.cs I used put all the set up in MappingProfile.cs then just 
    told automapper what assembly to look in for mappings (see below). Done.

    Mapper.Initialize(cfg =>
                cfg.AddProfiles(new [] {"CarPriceComparison"})
            );

    The next big thing was to inject an instance of IMapper into the VehicleController 

     public class VehicleController : Controller    {
        private IMapper _mapper;
        private IVehicleRepository _vehicleRepository;
        public VehicleController(IVehicleRepository vehicleRepository_, IMapper mapper_)
        {
            _mapper = mapper_;
            _vehicleRepository = vehicleRepository_;  
        }

    NOw you have done this, use the _mapper INSTANCE rather than the static Mapper class to do the mapping. 
    This seemed to overcoe the issue I was having (https://stackoverflow.com/questions/55261646/auto-mapper-error-no-parameterless-constructor-defined-for-this-object)

    [HttpPost("")]
        public IActionResult PostNewVehicleData([FromBody]VehicleViewModel vehicleData_)
        {
            if (ModelState.IsValid)
            {
                //ultimately we want our new vehicle data saving to the database....
                var newVehicle = _mapper.Map<Vehicle>(vehicleData_);

    NOTE - TO MAKE the DI happen (to get the ability to inject IMapper into the VehicleController in the first place)
    you need to add automapper to the IServiceCollection in Startup.ConfigureServices :-

    services.AddAutoMapper(typeof(Startup));

    the AddAutoMapper is possible cos of the nuget package installed on 22nd.

10th June
   Migrated to automapper 2.2
   TOFIX : added VehicleController.GetVehicle - id parameter is always mapped as a zero,
   no matter what was passed in - asked and resolved on Stack overflow

   TOFIX : _linkGenerator in VehicleController.PostNewVehicleData always returns null - Fixed via Stack 
   overflow

3rd July
TO UNDERSTAND
    Added shell of a PicturesController. Note new signature for get. 
    Task<ActionResult<Picture[]>> this is a  different pattern to the signatures in
    VehicleController - e.g public IActionResult GetVehicle(int vehicleId_)
    what is the difference? What is the advantage of going the 
    Task<ActionResult<Picture[]>> way??

12th November 2019
    Pictures Controller - I could not understand why the foreign Key withing the Pictures
    table was always being returned as null. The answer was because I was not Including it.

    See 'Include' in the query below. Dont include this and Vehicle is always null.
    ALSO - I was using .ToList() immediately after the .Include(vp => vp.Vehicle)
    dont do this - it loads the entire result set into memory BEFORE  any filtering is done

    public Picture GetIndividualPicture(int vehicleId_, int pictureId_)
        {
            IEnumerable<Picture> pictures =  from v in _vehicleContext.Pictures
                        .Include(vp => vp.Vehicle)
                        .Where(x => x.Vehicle.Id == vehicleId_
                                && x.Id == pictureId_) select v;    
            return pictures.FirstOrDefault();
        }

